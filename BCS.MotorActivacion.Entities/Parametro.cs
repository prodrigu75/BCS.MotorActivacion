using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BCS.MotorActivacion.Entities
{
    /// <summary>
	/// Parametro.cls
	/// Implementation of the  Class Parametro
	/// Generated by Enterprise Architect
	/// Created on:      28-Jun-2007 11:34:55 a.m.
	/// Original author: rcabrerar
    /// </summary>
    public class Parametro
    {
        #region Variables Miembro
        private int mCodigoOperacionUsuario;
        private int mCodigoOperacion;
        private int mCodigoProceso;
        private int mCodigoServicio;
        private short mTipoIO;
        private int mCodigoSeccion;
        private short mIndex;
        private int mCodigoParametro;
        private string mFKParametro;
        private string mNombre;
        private string mDescripcion;
        private short mTipoDato;
        private short mLargo;
        private short mDecimales;
        private string mFormato;
        private string mDelimitador;
        private short mOrden;
        private int mCodigoSeccionRelacionada;
        private short mOrigen;
        private string mValor;
        private short mTipoValidacion;
        private string mCodRelVal;
        private short mOrigenUsuario;
        private string mValorUsuario;
        private short mReglaValor;
        private bool mExcluir;
        private short mRelativo;
        private string mParametroRelativo;
        private string mCondicionRelativo;
        private object mValorRelativo;
        #endregion

        #region Propiedades
        public string CodRelVal
        {
            get { return mCodRelVal; }
            set { mCodRelVal = value; }
        }
	
	    public int CodigoOperacionUsuario
        {
            get { return mCodigoOperacionUsuario; }
            set { mCodigoOperacionUsuario = value; }
        }
	
	    public int CodigoOperacion {
		    get { return mCodigoOperacion; }
		    set { mCodigoOperacion = value; }
	    }
	
	    public int CodigoProceso
        { 
		    get { return mCodigoProceso; }
		    set { mCodigoProceso = value; }
	    }
	
	    public int CodigoServicio
        {
		    get { return mCodigoServicio; }
		    set { mCodigoServicio = value; }
	    }
        #endregion



        /*
	private mItems As Parametros
	

	
	public Property TipoIO()As int
		get {
			TipoIO = mTipoIO
		}
		set {
			mTipoIO = value
		}
	}
	
	public Property CodigoSeccion()As int
		get {
			CodigoSeccion = mCodigoSeccion
		}
		set {
			mCodigoSeccion = value
		}
	}
	
	public Property Index() As Short
		get {
			Index = mIndex
		}
		set {(ByVal value As Short)
			mIndex = value
		}
	}
	
	public Property CodigoParametro()As int
		get {
			CodigoParametro = mCodigoParametro
		}
		set {
			mCodigoParametro = value
		}
	}
	
	public Property FKParametro() As String
		get {
			FKParametro = mFKParametro
		}
		set {(ByVal value As String)
			mFKParametro = value
		}
	}
	
	public Property Orden() As Short
		get {
			Orden = mOrden
		}
		set {(ByVal value As Short)
			mOrden = value
		}
	}
	
	public Property TipoValidacion() As Short
		get {
			TipoValidacion = mTipoValidacion
		}
		set {(ByVal value As Short)
			mTipoValidacion = value
		}
	}
	
	public Property Nombre() As String
		get {
			Nombre = mNombre
		}
		set {(ByVal value As String)
			mNombre = value
		}
	}
	
	public Property Descripcion() As String
		get {
			Descripcion = mDescripcion
		}
		set {(ByVal value As String)
			mDescripcion = value
		}
	}
	
	public Property TipoDato() As Short
		get {
			TipoDato = mTipoDato
		}
		set {(ByVal value As Short)
			mTipoDato = value
		}
	}
	
	public Property Largo() As Short
		get {
			Largo = mLargo
		}
		set {(ByVal value As Short)
			mLargo = value
		}
	}
	
	public Property Decimales() As Short
		get {
			Decimales = mDecimales
		}
		set {(ByVal value As Short)
			mDecimales = value
		}
	}
	
	public Property Formato() As String
		get {
			Formato = mFormato
		}
		set {(ByVal value As String)
			mFormato = value
		}
	}
	
	public Property Delimitador() As String
		get {
			Delimitador = mDelimitador
		}
		set {(ByVal value As String)
			mDelimitador = value
		}
	}
	
	public Property CodigoSeccionRel()As int
		get {
			CodigoSeccionRel = mCodigoSeccionRel
		}
		set {
			mCodigoSeccionRel = value
		}
	}
	
	public Property Origen() As Short
		get {
			Origen = mOrigen
		}
		set {(ByVal value As Short)
			mOrigen = value
		}
	}
	
	public Property Valor() As String
		get {
			Valor = mValor
		}
		set {(ByVal value As String)
			'UPGRADE_WARNING: Se detectó el uso de Null/IsNull(). Haga clic aquí para obtener más información: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="2EED02CB-5C0E-4DC1-AE94-4FAA3A30F51A"'
			If Not IsDbNull(value) Then
				mValor = value
			Else
				mValor = ""
			End If
		}
	}
	
	public Property OrigenU() As Short
		get {
			OrigenU = mOrigenU
		}
		set {(ByVal value As Short)
			mOrigenU = value
		}
	}
	
	public Property ValorU() As String
		get {
			ValorU = mValorU
		}
		set {(ByVal value As String)
			'UPGRADE_WARNING: Se detectó el uso de Null/IsNull(). Haga clic aquí para obtener más información: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="2EED02CB-5C0E-4DC1-AE94-4FAA3A30F51A"'
			If Not IsDbNull(value) Then
				mValorU = value
			Else
				mValorU = ""
			End If
		}
	}
	
	public Property ReglaValor() As Short
		get {
			ReglaValor = mReglaValor
		}
		set {(ByVal value As Short)
			mReglaValor = value
		}
	}
	
	public Property Excluir() As Boolean
		get {
			Excluir = mExcluir
		}
		set {(ByVal value As Boolean)
			mExcluir = value
		}
	}
	
	public Property Relativo() As String
		get {
			Relativo = CStr(mRelativo)
		}
		set {(ByVal value As String)
			mRelativo = CShort(value)
		}
	}
	
	public Property ParametroRelativo() As String
		get {
			ParametroRelativo = mParametroRelativo
		}
		set {(ByVal value As String)
			mParametroRelativo = value
		}
	}
	
	public Property CondicionRelativo() As String
		get {
			CondicionRelativo = mCondicionRelativo
		}
		set {(ByVal value As String)
			mCondicionRelativo = value
		}
	}
	
	public Property ValorRelativo() As Object
		get {
			'UPGRADE_WARNING: No se puede resolver la propiedad predeterminada del objeto mValorRelativo. Haga clic aquí para obtener más información: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"'
			'UPGRADE_WARNING: No se puede resolver la propiedad predeterminada del objeto ValorRelativo. Haga clic aquí para obtener más información: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"'
			ValorRelativo = mValorRelativo
		}
		set {(ByVal value As Object)
			'UPGRADE_WARNING: No se puede resolver la propiedad predeterminada del objeto NewVal. Haga clic aquí para obtener más información: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"'
			'UPGRADE_WARNING: No se puede resolver la propiedad predeterminada del objeto mValorRelativo. Haga clic aquí para obtener más información: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6A50421D-15FE-4896-8A1B-2EC21E9037B2"'
			mValorRelativo = value
		}
	}
	
	public Property Items() As Parametros
		get {
			Items = mItems
		}
		set {(ByVal value As Parametros)
			mItems = value
		}
	}
	
	public Function Clone() As Parametro
		'UPGRADE_NOTE: Copia se actualizó a Copia_Renamed. Haga clic aquí para obtener más información: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="A9E4979A-37FA-4718-9994-97DD76ED70A7"'
		Dim Copia_Renamed As Parametro
		Dim tmp As Parametro
		Dim i As Short
		
		Copia_Renamed = New Parametro
		With Copia_Renamed
			.CodigoOperacionU = mCodigoOperacionU
			.CodigoOperacion = mCodigoOperacion
			.CodigoProceso = mCodigoProceso
			.CodigoServicio = mCodigoServicio
			.TipoIO = mTipoIO
			.CodigoSeccion = mCodigoSeccion
			.Index = mIndex
			.CodigoParametro = mCodigoParametro
			.FKParametro = mFKParametro
			
			.Nombre = mNombre
			.Descripcion = mDescripcion
			.TipoDato = mTipoDato
			.Largo = mLargo
			.Decimales = mDecimales
			.Formato = mFormato
			.Delimitador = mDelimitador
			.CodigoSeccionRel = mCodigoSeccionRel
			
			.Origen = mOrigen
			.Valor = mValor
			
			.OrigenU = mOrigenU
			.ValorU = mValorU
			.ReglaValor = mReglaValor
			
			.Excluir = mExcluir
			
			If mTipoDato = Declaraciones.TypeDataParameterEnum.TypeDataParameterComposed Or mTipoDato = Declaraciones.TypeDataParameterEnum.TypeDataParameterOcurrence Then
				If Not mItems Is Nothing Then
					.Items = mItems.Clone
				End If
			End If
			
		End With
		Clone = Copia_Renamed
	End Function
	
	'UPGRADE_NOTE: toString se actualizó a toString_Renamed. Haga clic aquí para obtener más información: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="A9E4979A-37FA-4718-9994-97DD76ED70A7"'
	public Function toString_Renamed() As String
		
		On Error GoTo 0
		On Error GoTo ErrToString
		
		Dim cadena As String
		Dim pos As Short
		
		cadena = Trim(mValor)
		
		Select Case mTipoDato
			Case Declaraciones.TypeDataParameterEnum.TypeDataParameterComposed, Declaraciones.TypeDataParameterEnum.TypeDataParameterOcurrence
				
				If Not mItems Is Nothing Then
					
                    cadena = mItems.toString()
					
					If Len(cadena) > 0 Then
						If Len(cadena) < mLargo And mLargo > 0 Then
							cadena = cadena & Space(mLargo - Len(cadena))
						ElseIf Len(cadena) > mLargo And mLargo > 0 Then 
							cadena = Mid(cadena, 1, mLargo)
						End If
					Else
						cadena = ""
					End If
					
				End If
			Case Declaraciones.TypeDataParameterEnum.TypeDataParameterNumeric
				If cadena <> "" Then
					If Not IsNumeric(cadena) Then
						cadena = "0"
					End If
					
					If Trim(mFormato) = "" And mLargo > 0 Then
						mFormato = RepeatChar("0", mLargo)
					End If
					
					If mFormato <> "" Then
						cadena = VB6.Format(cadena, mFormato)
						pos = InStr(cadena, ",")
						If pos > 0 Then
							cadena = Replace(cadena, ",", ".")
						End If
						
					End If
					
					If Len(cadena) > mLargo And mLargo > 0 Then
						cadena = Mid(cadena, 1, mLargo)
					ElseIf Len(cadena) < mLargo And mLargo > 0 Then 
						cadena = cadena & Space(mLargo - Len(cadena))
					End If
				Else
					cadena = RepeatChar(" ", mLargo)
				End If
			Case Declaraciones.TypeDataParameterEnum.TypeDataParameterText
				If cadena <> "" Then
					If Len(cadena) > mLargo And mLargo > 0 Then
						cadena = Mid(cadena, 1, mLargo)
					ElseIf Len(cadena) < mLargo And mLargo > 0 Then 
						cadena = cadena & Space(mLargo - Len(cadena))
					End If
				Else
					cadena = RepeatChar(" ", mLargo)
				End If
			Case Declaraciones.TypeDataParameterEnum.TypeDataParameterDateTime
				If cadena <> "" Then
                    Dim MiFecha As Date

                    MiFecha = Convert.ToDateTime(cadena)

                    If Trim(mFormato) <> "" Then
                        cadena = VB6.Format(cadena, mFormato)
                    End If
					
					If Len(cadena) > mLargo And mLargo > 0 Then
						cadena = Mid(cadena, 1, mLargo)
					ElseIf Len(cadena) < mLargo And mLargo > 0 Then 
						cadena = cadena & Space(mLargo - Len(cadena))
					End If
				Else
					cadena = RepeatChar(" ", mLargo)
				End If
				
			Case Declaraciones.TypeDataParameterEnum.TypeDataParameterNumericSRM
				If cadena <> "" Then
					If Trim(mFormato) <> "" Then
						cadena = FormatNumeroSrm(cadena, mFormato)
					End If
					
					If Len(cadena) > mLargo And mLargo > 0 Then
						cadena = Mid(cadena, 1, mLargo)
					ElseIf Len(cadena) < mLargo And mLargo > 0 Then 
						cadena = cadena & Space(mLargo - Len(cadena))
					End If
				Else
					cadena = RepeatChar(" ", mLargo)
				End If
		End Select
		
		toString_Renamed = cadena
		
		Exit Function
		
ErrToString: 
		
		'Aqui se debe guardar el error
		
	End Function
	
	public Function hasChildren() As Boolean
		hasChildren = False
		If mTipoDato = Declaraciones.TypeDataParameterEnum.TypeDataParameterComposed Or mTipoDato = Declaraciones.TypeDataParameterEnum.TypeDataParameterOcurrence Then
			hasChildren = True
		End If
	End Function
	
	public Function Key() As String
		
		Key = mCodigoServicio & "." & mTipoIO & "." & mCodigoSeccion & "." & mCodigoParametro & "[" & mIndex & "]" & "@" & mFKParametro
		
	End Function
	
	'UPGRADE_NOTE: Class_Terminate se actualizó a Class_Terminate_Renamed. Haga clic aquí para obtener más información: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="A9E4979A-37FA-4718-9994-97DD76ED70A7"'
	private Sub Class_Terminate_Renamed()
		'UPGRADE_NOTE: El objeto mItems no se puede destruir hasta que no se realice la recolección de los elementos no utilizados. Haga clic aquí para obtener más información: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"'
		mItems = Nothing
	End Sub
	Protected Overrides Sub Finalize()
		Class_Terminate_Renamed()
		MyBase.Finalize()
	End Sub
End Class         
        */












    }
}
