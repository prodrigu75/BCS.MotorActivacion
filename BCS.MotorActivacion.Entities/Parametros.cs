using System.Collections.Generic;

namespace BCS.MotorActivacion.Entities
{
    public enum TypeDataParameterEnum {
        TypeDataParameterText = 0,
        TypeDataParameterNumeric = 1,
        TypeDataParameterDateTime = 2,
        TypeDataParameterComposed = 3,
        TypeDataParameterOcurrence = 4,
        TypeDataParameterNumericSRM = 5
    }

    public class Parametros: List<Parametro>
    {
    }

    /// <summary>
    /// Parametro.cls
    /// Implementation of the  Class Parametro
    /// Generated by Enterprise Architect
    /// Created on:      28-Jun-2007 11:34:55 a.m.
    /// Original author: rcabrerar
    /// </summary>
    public class Parametro
    {
        #region Variables Miembro
        private int mCodigoOperacionUsuario;
        private int mCodigoOperacion;
        private int mCodigoProceso;
        private int mCodigoServicio;
        private short mTipoIO;
        private int mCodigoSeccion;
        private short mIndex;
        private int mCodigoParametro;
        private string mFKParametro;
        private string mNombre;
        private string mDescripcion;
        private short mTipoDato;
        private short mLargo;
        private short mDecimales;
        private string mFormato;
        private string mDelimitador;
        private short mOrden;
        private int mCodigoSeccionRelacionada;
        private short mOrigen;
        private string mValor;
        private short mTipoValidacion;
        private string mCodRelVal;
        private short mOrigenUsuario;
        private string mValorUsuario;
        private short mReglaValor;
        private bool mExcluir;
        private short mRelativo;
        private string mParametroRelativo;
        private string mCondicionRelativo;
        private object mValorRelativo;
        #endregion

        #region Propiedades
        public string CodRelVal
        {
            get { return mCodRelVal; }
            set { mCodRelVal = value; }
        }

        public int CodigoOperacionUsuario
        {
            get { return mCodigoOperacionUsuario; }
            set { mCodigoOperacionUsuario = value; }
        }

        public int CodigoOperacion
        {
            get { return mCodigoOperacion; }
            set { mCodigoOperacion = value; }
        }

        public int CodigoProceso
        {
            get { return mCodigoProceso; }
            set { mCodigoProceso = value; }
        }

        public int CodigoServicio
        {
            get { return mCodigoServicio; }
            set { mCodigoServicio = value; }
        }

        public short TipoIO
        {
            get { return mTipoIO; }
            set { mTipoIO = value; }
        }

        public int CodigoSeccion
        {
            get { return mCodigoSeccion; }
            set { mCodigoSeccion = value; }
        }

        public short Index
        {
            get { return mIndex; }
            set { mIndex = value; }
        }

        public int CodigoParametro
        {
            get { return mCodigoParametro; }
            set { mCodigoParametro = value; }
        }

        public string FKParametro
        {
            get { return mFKParametro; }
            set { mFKParametro = value; }
        }

        public short Orden
        {
            get { return mOrden; }
            set { mOrden = value; }
        }

        public short TipoValidacion
        {
            get { return mTipoValidacion; }
            set { mTipoValidacion = value; }
        }

        public string Nombre
        {
            get { return mNombre; }
            set { mNombre = value; }
        }

        public string Descripcion
        {
            get { return mDescripcion; }
            set { mDescripcion = value; }
        }

        public short TipoDato
        {
            get { return mTipoDato; }
            set { mTipoDato = value; }
        }

        public short Largo
        {
            get { return mLargo; }
            set { mLargo = value; }
        }

        public short Decimales
        {
            get { return mDecimales; }
            set { mDecimales = value; }
        }

        public string Formato
        {
            get { return mFormato; }
            set { mFormato = value; }
        }

        public string Delimitador
        {
            get { return mDelimitador; }
            set { mDelimitador = value; }
        }

        public int CodigoSeccionRelacionado
        {
            get { return mCodigoSeccionRelacionada; }
            set { mCodigoSeccionRelacionada = value; }
        }

        public short Origen
        {
            get { return mOrigen; }
            set { mOrigen = value; }
        }

        public string Valor
        {
            get { return mValor == null ? "" : mValor; }
            set { mValor = value; }
        }

        public short OrigenUsuario
        {
            get { return mOrigenUsuario; }
            set { mOrigenUsuario = value; }
        }

        public string ValorU
        {
            get { return mValorUsuario; }
            set { mValorUsuario = value; }
        }

        public short ReglaValor
        {
            get { return mReglaValor; }
            set { mReglaValor = value; }
        }

        public bool Excluir
        {
            get { return mExcluir; }
            set { mExcluir = value; }
        }

        public string Relativo
        {
            get { return mRelativo.ToString(); }
            set
            {
                short s;

                if (!short.TryParse(value, out s))
                    s = 0;

                mRelativo = s;
            }
        }

        public string ParametroRelativo
        {
            get { return mParametroRelativo; }
            set { mParametroRelativo = value; }
        }

        public string CondicionRelativo
        {
            get { return mCondicionRelativo; }
            set { mCondicionRelativo = value; }
        }

        public object ValorRelativo
        {
            get { return mValorRelativo; }
            set { mValorRelativo = value; }
        }
        #endregion

/*

            public override string ToString()
                {
                    string cadena;
                    short pos;

                    try
                    {
                        cadena = mValor.Trim();

                        switch (mTipoDato)
                        {
                            case TypeDataParameterEnum.TypeDataParameterComposed:
                            case TypeDataParameterEnum.TypeDataParameterOcurrence:
                                { 
                                if (mItems != null) 


                                    cadena = mItems.tostring()


                                    if Len(cadena) > 0 Then

                                        if Len(cadena) < mLargo And mLargo > 0 Then
                                            cadena = cadena & Space(mLargo - Len(cadena))

                                        Elseif Len(cadena) > mLargo And mLargo > 0 Then

                                            cadena = Mid(cadena, 1, mLargo)

                                        End If

                                    Else

                                        cadena = ""

                                    End If


                                End If

                        }
                        Case Declaraciones.TypeDataParameterEnum.TypeDataParameterNumeric

                        if cadena <> "" Then

                            if Not IsNumeric(cadena) Then
                                cadena = "0"

                            End If


                            if Trim(mFormato) = "" And mLargo > 0 Then
                                mFormato = RepeatChar("0", mLargo)

                            End If


                            if mFormato <> "" Then
                                cadena = VB6.Format(cadena, mFormato)

                                pos = InStr(cadena, ",")

                                if pos > 0 Then
                                    cadena = Replace(cadena, ",", ".")

                                End If


                            End If


                            if Len(cadena) > mLargo And mLargo > 0 Then
                                cadena = Mid(cadena, 1, mLargo)

                            Elseif Len(cadena) < mLargo And mLargo > 0 Then

                                cadena = cadena & Space(mLargo - Len(cadena))

                            End If

                        Else

                            cadena = RepeatChar(" ", mLargo)

                        End If

                    Case Declaraciones.TypeDataParameterEnum.TypeDataParameterText

                        if cadena <> "" Then

                            if Len(cadena) > mLargo And mLargo > 0 Then
                                cadena = Mid(cadena, 1, mLargo)

                            Elseif Len(cadena) < mLargo And mLargo > 0 Then

                                cadena = cadena & Space(mLargo - Len(cadena))

                            End If

                        Else

                            cadena = RepeatChar(" ", mLargo)

                        End If

                    Case Declaraciones.TypeDataParameterEnum.TypeDataParameterDateTime

                        if cadena <> "" Then
                            Dim MiFecha As Date

                            MiFecha = Convert.ToDateTime(cadena)

                            if Trim(mFormato) <> "" Then
                                cadena = VB6.Format(cadena, mFormato)
                            End If


                            if Len(cadena) > mLargo And mLargo > 0 Then
                                cadena = Mid(cadena, 1, mLargo)

                            Elseif Len(cadena) < mLargo And mLargo > 0 Then

                                cadena = cadena & Space(mLargo - Len(cadena))

                            End If

                        Else

                            cadena = RepeatChar(" ", mLargo)

                        End If


                    Case Declaraciones.TypeDataParameterEnum.TypeDataParameterNumericSRM

                        if cadena <> "" Then

                            if Trim(mFormato) <> "" Then
                                cadena = FormatNumeroSrm(cadena, mFormato)

                            End If


                            if Len(cadena) > mLargo And mLargo > 0 Then
                                cadena = Mid(cadena, 1, mLargo)

                            Elseif Len(cadena) < mLargo And mLargo > 0 Then

                                cadena = cadena & Space(mLargo - Len(cadena))

                            End If

                        Else

                            cadena = RepeatChar(" ", mLargo)

                        End If

                End Select
                    }
                    catch (Exception)
                    {
                    }





                    tostring_Renamed = cadena
            }
            public Function Clone() As Parametro
                'UPGRADE_NOTE: Copia se actualizó a Copia_Renamed. Haga clic aquí para obtener más información: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="A9E4979A-37FA-4718-9994-97DD76ED70A7"'
                Dim Copia_Renamed As Parametro
                Dim tmp As Parametro
                Dim i As short

                Copia_Renamed = New Parametro
                With Copia_Renamed
                    .CodigoOperacionU = mCodigoOperacionU
                    .CodigoOperacion = mCodigoOperacion
                    .CodigoProceso = mCodigoProceso
                    .CodigoServicio = mCodigoServicio
                    .TipoIO = mTipoIO
                    .CodigoSeccion = mCodigoSeccion
                    .Index = mIndex
                    .CodigoParametro = mCodigoParametro
                    .FKParametro = mFKParametro

                    .Nombre = mNombre
                    .Descripcion = mDescripcion
                    .TipoDato = mTipoDato
                    .Largo = mLargo
                    .Decimales = mDecimales
                    .Formato = mFormato
                    .Delimitador = mDelimitador
                    .CodigoSeccionRel = mCodigoSeccionRel

                    .Origen = mOrigen
                    .Valor = mValor

                    .OrigenU = mOrigenU
                    .ValorU = mValorU
                    .ReglaValor = mReglaValor

                    .Excluir = mExcluir

                    if mTipoDato = Declaraciones.TypeDataParameterEnum.TypeDataParameterComposed Or mTipoDato = Declaraciones.TypeDataParameterEnum.TypeDataParameterOcurrence Then
                        if Not mItems Is Nothing Then
                            .Items = mItems.Clone
                        End If
                    End If

                End With
                Clone = Copia_Renamed
            End Function


            public Function hasChildren() As bool
                hasChildren = False
                if mTipoDato = Declaraciones.TypeDataParameterEnum.TypeDataParameterComposed Or mTipoDato = Declaraciones.TypeDataParameterEnum.TypeDataParameterOcurrence Then
                    hasChildren = True
                End If
            End Function

            public Function Key() As string

                Key = mCodigoServicio & "." & mTipoIO & "." & mCodigoSeccion & "." & mCodigoParametro & "[" & mIndex & "]" & "@" & mFKParametro

            End Function

            'UPGRADE_NOTE: Class_Terminate se actualizó a Class_Terminate_Renamed. Haga clic aquí para obtener más información: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="A9E4979A-37FA-4718-9994-97DD76ED70A7"'
            private Sub Class_Terminate_Renamed()
                'UPGRADE_NOTE: El objeto mItems no se puede destruir hasta que no se realice la recolección de los elementos no utilizados. Haga clic aquí para obtener más información: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"'
                mItems = Nothing
            End Sub
            Protected Overrides Sub Finalize()
                Class_Terminate_Renamed()
                MyBase.Finalize()
            End Sub
        End Class         
                */
    }
}
